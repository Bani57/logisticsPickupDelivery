*** ASSUMING INSTANT DELIVERIES ***

K = Vehicle.costPerKm(), can get from ReactiveTemplate

 === States ===

 C = {City c|c in Topology t}
 s in S <=> s = (C_L, C_D), C_L in C, C_D in union(C, NULL)

 C_L : Current location
 C_D : Destination city of task at C_L, NULL if there is no task at C_L

 for location in C:
 	for taskDestination in C:
 		if(taskDestination != location)
 			S.add((location, taskDestination))
 	S.add((location, null))

|S| = O(|C|^2)


=== Actions ===
a in A <=> a = { i in [0, |C|-1], if "MOVE TO CITY C[i]",
				 |C| if "PICKUP" }

|A| = O(|C|)

=== Reward Table R(s,a) ===
R(s, a) = R(C_L, C_D, A) {

	td.Reward(C_L, C_D) - K * distance(C_L, C_D), if A = "PICKUP" AND C_D != NULL

	- K * distance(C_L, C[i]), if A = "MOVE TO CITY C[i]" AND neighbors(C_L, C[i])

	0, otherwise
}

|R| = O(|C|^3)

=== Transition Probability Table T(s, a, s') ===
T(s, a, s') = T({C_L, C_D}, A, {C_L', C_D'}) =
= Pr{C_L', C_D' | C_L, C_D, A} = {

	td.Prob(C_L', C_D'), if A = "PICKUP" AND C_D != NULL AND C_L'= C_D (AND pathExists(C_L, C_D)) AND C_D' != NULL
	td.Prob_notask(C_L'), if A = "PICKUP" AND C_D != NULL AND C_L'= C_D (AND pathExists(C_L, C_D)) AND C_D' = NULL

	td.Prob(C_L', C_D'), if A = "MOVE TO CITY C[i]" AND C_L'= C[i] AND neighbors(C_L, C[i]) AND C_D' != NULL
	td.Prob_notask(C_L'), if A = "MOVE TO CITY C[i]" AND C_L'= C[i] AND neighbors(C_L, C[i]) AND C_D' = NULL

	0, otherwise

}

|T| = O(|C|^5)